<?php
// This file is part of Moodle - https://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.

/**
 * The main mod_assignquiz configuration form.
 *
 * @package     mod_assignquiz
 * @copyright   2024 Zakaria Lasry Sahraou zsahraoui20@gmail.com
 * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

use Spatie\PdfToText\Pdf;


defined('MOODLE_INTERNAL') || die();

require_once($CFG->dirroot . '/course/moodleform_mod.php');
require_once($CFG->dirroot . '/mod/quiz/mod_form.php');
require_once($CFG->dirroot . '/mod/quiz/locallib.php');
require_once($CFG->dirroot . '/mod/assignquiz/locallib.php');
require_once($CFG->dirroot . '/grade/querylib.php');
require_once($CFG->dirroot . '/vendor/autoload.php');
require_once($CFG->dirroot . '/question/type/multichoice/questiontype.php'); // Add this line

class mod_assignquiz_mod_form extends mod_quiz_mod_form
{


    /**
     * Defines forms elements
     */

    protected function definition()
    {

        parent::definition(); // TODO: Change the autogenerated stub
        $mform = $this->_form;
        $quizconfig = get_config('assignquiz');
        $mform->setDefault('preferredbehaviour', 'deferredfeedback');
        $mform->setDefault('decimalpoints', 2);
        $mform->setDefault('questiondecimalpoints', -1);

        //feedback will be ai generated, so no need for these elements
        $mform->removeElement('overallfeedbackhdr');
        $mform->removeElement('gradeboundarystatic1');
        $mform->removeElement('gradeboundarystatic2');
        $mform->removeElement('boundary_repeats');
        $mform->removeElement('boundary_add_fields');
        $mform->removeElement('feedbacktext[0]');


        $this->form_edit_modif();

        global $DB, $CFG, $OUTPUT, $PAGE;
        $course = $this->optional_param('course', 0, PARAM_INT);
        $section = $this->optional_param('section', 0, PARAM_INT);
        $data = new stdClass();
        $data->course = $course;
        $data->section = $section;
        $name = get_section_name($course, $section);
        $files = get_pdfs_in_section($data);
        $envFile = $CFG->dirroot . '/mod/assignquiz/.env';
        $env = parse_ini_file($envFile);
        if (is_openai_apikey_empty()) {
            redirect($CFG->wwwroot . '/course/view.php?id=' . $course,
                get_string('apikeyempty', 'assignquiz'),
                null,
                \core\output\notification::NOTIFY_ERROR
            );

        } elseif (!is_openai_api_key_valid($env['OPENAI_API_KEY'])) {
            redirect($CFG->wwwroot . '/course/view.php?id=' . $course,
                get_string('apikeyinvalid', 'assignquiz'),
                null,
                \core\output\notification::NOTIFY_ERROR
            );
        } elseif (count($files) === 0) {
            redirect($CFG->wwwroot . '/course/view.php?id=' . $course,
                "You need to upload at least one file in the \"$name\" section before creating an AI Quiz instance in it.",
                null,
                \core\output\notification::NOTIFY_ERROR
            );
        }


        if (empty($this->_instance)) {
            $mform->addElement('html', '
            <div id="loadingScreen" style="display: none;">
                <div class="loading-content">
                    <div class="spinner"></div>
                    <h4>Loading...</h4>
                    <p>Please wait while the questions are generated.</p>
                </div>
            </div>
        ');

            $mform->addElement('html', '
   <script>
document.addEventListener("DOMContentLoaded", function () {
    const saveAndReturnBtn = document.querySelector("input[name=submitbutton]");
    const saveAndDisplayBtn = document.querySelector("input[name=submitbutton2]");
    const name = document.getElementById("id_name");
    function showLoading(event) {
        // First check form validity
        if (name.value.trim()) {
            const screen = document.getElementById("loadingScreen");
            if (screen) screen.style.display = "flex";
        }
    }

    if (saveAndReturnBtn) {
        saveAndReturnBtn.addEventListener("click", showLoading);
    }

    if (saveAndDisplayBtn) {
        saveAndDisplayBtn.addEventListener("click", showLoading);
    }
});
</script>

');
        }

    }

    private function form_edit_modif()
    {
        $mform = $this->_form;

        // Create and add the first element.
        $mform->addElement('header', 'questionhdr', get_string('questionhdr', 'assignquiz'));
        $mform->insertElementBefore($mform->removeElement('questionhdr'), 'layouthdr');

        $mform->addElement('text', 'numberofquestions', get_string('numberofquestions', 'assignquiz'));
        $mform->addHelpButton('numberofquestions', 'numberofquestions', 'assignquiz');
        $mform->insertElementBefore($mform->removeElement('numberofquestions'), 'layouthdr');
        $mform->setDefault('numberofquestions', 10);
        $mform->setType('numberofquestions', PARAM_INT);

        $mform->addElement('text', 'questioncorrectvalue', get_string('questioncorrectvalue', 'assignquiz'));
        $mform->addHelpButton('questioncorrectvalue', 'questiongradecorrectd', 'assignquiz');
        $mform->insertElementBefore($mform->removeElement('questioncorrectvalue'), 'layouthdr');
        $mform->setDefault('questioncorrectvalue', number_format(1.0, 1));
        $mform->setType('questioncorrectvalue', PARAM_FLOAT);
        // Create and add the second element.
        $mform->addElement('text', 'questionincorrectvalue', get_string('questionincorrectvalue', 'assignquiz'));
        $mform->addHelpButton('questionincorrectvalue', 'questiongradeincorrect', 'assignquiz');
        $mform->setDefault('questionincorrectvalue', number_format(0.0, 1));
        $mform->insertElementBefore($mform->removeElement('questionincorrectvalue'), 'layouthdr');
        $mform->setType('questionincorrectvalue', PARAM_FLOAT);

    }


    public function data_preprocessing(&$toform)
    {

        if (isset($toform['grade'])) {
            // Convert to a real number, so we don't get 0.0000.
            $toform['grade'] = $toform['grade'] + 0;
        }
        if (count($this->_feedbacks)) {
            $key = 0;
            foreach ($this->_feedbacks as $feedback) {
                $draftid = file_get_submitted_draft_itemid('feedbacktext[' . $key . ']');
                $toform['feedbacktext[' . $key . ']']['text'] = file_prepare_draft_area(
                    $draftid,               // Draftid.
                    $this->context->id,     // Context.
                    'mod_quiz',             // Component.
                    'feedback',             // Filarea.
                    !empty($feedback->id) ? (int)$feedback->id : null, // Itemid.
                    null,
                    $feedback->feedbacktext // Text.
                );
                $toform['feedbacktext[' . $key . ']']['format'] = $feedback->feedbacktextformat;
                $toform['feedbacktext[' . $key . ']']['itemid'] = $draftid;

                if ($toform['grade'] == 0) {
                    // When a quiz is un-graded, there can only be one lot of
                    // feedback. If the quiz previously had a maximum grade and
                    // several lots of feedback, we must now avoid putting text
                    // into input boxes that are disabled, but which the
                    // validation will insist are blank.
                    break;
                }

                if ($feedback->mingrade > 0) {
                    $toform['feedbackboundaries[' . $key . ']'] =
                        round(100.0 * $feedback->mingrade / $toform['grade'], 6) . '%';
                }
                $key++;
            }
        }

        if (isset($toform['timelimit'])) {
            $toform['timelimitenable'] = $toform['timelimit'] > 0;
        }

        $this->preprocessing_review_settings($toform, 'during',
            mod_quiz_display_options::DURING);
        $this->preprocessing_review_settings($toform, 'immediately',
            mod_quiz_display_options::IMMEDIATELY_AFTER);
        $this->preprocessing_review_settings($toform, 'open',
            mod_quiz_display_options::LATER_WHILE_OPEN);
        $this->preprocessing_review_settings($toform, 'closed',
            mod_quiz_display_options::AFTER_CLOSE);
        $toform['attemptduring'] = true;
        $toform['overallfeedbackduring'] = false;


        // Password field - different in form to stop browsers that remember
        // passwords from getting confused.
        if (isset($toform['password'])) {
            $toform['quizpassword'] = $toform['password'];
            unset($toform['password']);
        }

        // Load any settings belonging to the access rules.
        if (!empty($toform['instance'])) {
            $accesssettings = aiquiz_access_manager::load_settings($toform['instance']);
            foreach ($accesssettings as $name => $value) {
                $toform[$name] = $value;
            }
        }

        if (empty($toform['completionminattempts'])) {
            $toform['completionminattempts'] = 1;
        } else {
            $toform['completionminattemptsenabled'] = $toform['completionminattempts'] > 0;
        }
    }

    public function validation($data, $files)
    {
        $errors = [];
// Check open and close times are consistent.
        if ($data['timeopen'] != 0 && $data['timeclose'] != 0 &&
            $data['timeclose'] < $data['timeopen']) {
            $errors['timeclose'] = get_string('closebeforeopen', 'quiz');
        }

        // Check that the grace period is not too short.
        if ($data['overduehandling'] == 'graceperiod') {
            $graceperiodmin = get_config('quiz', 'graceperiodmin');
            if ($data['graceperiod'] <= $graceperiodmin) {
                $errors['graceperiod'] = get_string('graceperiodtoosmall', 'quiz', format_time($graceperiodmin));
            }
        }

        if (!empty($data['completionminattempts'])) {
            if ($data['attempts'] > 0 && $data['completionminattempts'] > $data['attempts']) {
                $errors['completionminattemptsgroup'] = get_string('completionminattemptserror', 'quiz');
            }
        }

        // If CBM is involved, don't show the warning for grade to pass being larger than the maximum grade.
        if (($data['preferredbehaviour'] == 'deferredcbm') or ($data['preferredbehaviour'] == 'immediatecbm')) {
            unset($errors['gradepass']);
        }
        // Any other rule plugins.
        $errors = aiquiz_access_manager::assignquiz_validate_settings_form_fields($errors, $data, $files, $this);

        return $errors;
    }
}